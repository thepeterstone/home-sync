""""""""""""""'
" Misc stuff
set exrc                        "Make sure we run the vimrc
set secure                      "don't allow commandline executin in vimrc
set nocompatible                "all vim features!
set showcmd                     "show commands in statusline
set fileformats=unix            "I want to see those ^M if I'm editing a dos file
set confirm                     "Tell me if something fucks up
set visualbell t_vb=            "Don't ring any bells
set mouse=a                     "Use the mouse in all modes

set title                       "Let VIM manage the term title
set titlestring=%t\ %y\ %r\ %m  "Set a useful term title            
set titleold=Terminal           "Get rid of that stupid flying message

set nofoldenable                "Don't use folding
set foldlevel=30
set hidden                      "Better buffer management

" initialize pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

"""""""""""
"Text Formatting
set autoindent            "Auto indenting
set cindent               "auto un-indent close brackets
set cinoptions=>2         "one tab only
set tabstop=2             "Tab width
set softtabstop=2         "Soft tabstop
set expandtab             "use spaces instead of tabs
set shiftwidth=2          "how much to shift text when formatting
set backspace=2           "backspace over everything
set textwidth=120         "Text width
set showmatch             "Blink to show the {} and () matches
set matchtime=2           "make it a quick blink though
set formatoptions=cq2lt   "Do some neat comment stuff for us
syntax on                 "Do Syntax highlighting 
set number                "Show line numbers
set pastetoggle=<F9>

""""""""""""
"Searching stuff
set nohlsearch            "Don't highlight searches
set ignorecase            "for pattern matching
set smartcase             "if I use uppercase, match case sensitive
set incsearch             "show us matches immediately
set tags=tags;/           "search for 'tags' file all the way up the directory tree
set wildmenu              "use better tab-completion for commands
set wildmode=list:longest

"""""""""""""""
" Mappings
let mapleader = ","

"use ^c for Esc, except in normal mode 
map <C-c> <Esc>
"use ^c to quit with an error code 
nmap <C-c> :cq<CR>


"""""""""""""""
" Plugins
"

" vim-go
" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"
" highlight go-vim
highlight goSameId term=bold cterm=bold ctermbg=250 ctermfg=239
set updatetime=100 " updates :GoInfo faster

" vim-go command shortcuts
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>t :wa<CR>:!clear;go test<CR>
" autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>a :vsplit<CR><Plug>(go-alternate-edit)
autocmd FileType go nmap <leader>d :GoDeclsDir<CR>
autocmd FileType go nmap <leader>g <Plug>(go-generate)
autocmd FileType go nmap <leader>? :GoDoc<CR>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

function! s:toggle_coverage()
    call go#coverage#BufferToggle(!g:go_jump_to_error)
    highlight ColorColumn ctermbg=235
    highlight NonText ctermfg=239
    highlight SpecialKey ctermfg=239
    highlight goSameId term=bold cterm=bold ctermbg=250 ctermfg=239
endfunction

autocmd FileType go nmap <leader>c :<C-u>call <SID>toggle_coverage()<CR>


" SuperTab (requires supertab.vim)
let g:SuperTabefaultCompletionType = "context"
function! MyTagContext()
  if filereadable(expand('%:p:h') . '/tags')
    return "\<c-x>\<c-]>"
  endif
endfunction
let g:SuperTabCompletionContexts = ['MyTagContext', 's:ContextText', 's:ContextDiscover']
let g:SuperTabNoCompleteAfter = [ '\s', '{', ',', '^' ]
let g:SuperTabLongestEnhanced = 1

" tagbar (requires tagbar.vim)
nmap <C-g> :TagbarToggle<CR>

"TagExplorer
"nmap <silent> <C-m> :TagExplorer<CR>

" toggle NERD_tree (requires NERDTree.vim)
nmap <silent> <C-n> :NERDTreeToggle <CR>
vmap <C-n> :NERDTreeToggle <CR>
imap <C-n> <Esc>:NERDTreeToggle<CR>

" Mini Buffer Explorer (requires minibufexpl.vim)
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 

" Source Explorer (srcexpl.vim)
nmap <F2> :SrcExplToggle<CR>
let g:SrcExpl_winHeight = 8
let g:SrcExpl_refreshTime = 100 " Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_updateTags = 1    " Let the Source Explorer update the tags file when opening
let g:SrcExpl_jumpKey = "<ENTER>"
let g:SrcExpl_gobackKey = "<SPACE>"

"magic-indent the file / visual selection
map <silent> <F6> :call Indent() <CR>
vmap <F6> :call Indent()<CR>

function! Indent() range abort
    let savelnum = line(".")
    let lnum = a:firstline
    let lend = a:lastline
    if lnum == lend
        " No visual area choosen --> whole file
        " curpos to eof?
        let lnum = 1
        let lend = line("$")
        " Go to the begin of the file
        exec "1go"
    endif
    exec "normal " . lnum . "Gv" . lend . "G="
    exec "normal " . savelnum . "G" 
endfunction

"Execute the current buffer - overridden by augroups, below
nmap <silent> <C-x> :!./% <CR>

" Readme headings
imap \<CR> <Esc>YpVr=o<CR>

" Fat fingers?
cmap W<CR> w<CR>
cmap W!<CR> w!<CR>
cmap Q<CR> q<CR>
cmap Q!<CR> q!<CR>
cmap Q1<CR> q!<CR>
cmap q1<CR> q!<CR>
cmap Wq<CR> wq<CR>
cmap WQ<CR> wq<CR>

" Version control (requires VCSCommand.vim)
nmap <Leader>vr :VCSRevert<CR>
nmap <Leader>vl :VCSLog<CR>
nmap <Leader>vc :VCSCommit<CR>
nmap <Leader>vd :VCSDiff<CR>

""""""""""""""
"Color scheme
set t_Co=256
let g:zenburn_high_Contrast = 1
colorscheme burnout


""""""""""""""""
"Statusline stuff
"set laststatus=2     "always titlebar
"set statusline=%1*\ %f\ %2*%y\ %4*%r\ %m%=%3*%(<%c,%l/%L>%3p%%%)\ 
let g:VCSCommanfEnableBufferSetup = 1
set statusline=%<%f\ %{VCSCommandGetStatusLine()}\ %h%m%r%=%l,%c%V\ %P

" file, type, readonly, modified, col, line/totlines,percent
"makes use of the following colors with %N*
hi User1 ctermfg=green ctermbg=black
hi User2 ctermfg=cyan ctermbg=black
hi User3 ctermfg=yellow ctermbg=black
hi User4 ctermfg=red ctermbg=black

" invisible character colors
highlight NonText ctermfg=239
highlight SpecialKey ctermfg=239
hi Normal ctermbg=None
set shortmess=atI


""""""""""""""
"Autoload profiles
"ah, now the real black mojo begins

"enable filetype detection
filetype plugin indent on

if has("autocmd")
  "For all files, start at last edited position
  autocmd BufReadPost *
              \ if line("'\"") > 0 && line("'\"") <= line("$") |
              \ exe "normal g`\"" |
              \ endif

  "for all text files, set a good textwidth
  autocmd FileType text setlocal textwidth=80

  "HTML profile
  augroup html
      au BufRead *.shtml,*.html,*.htm set tw=120 formatoptions=tcqro2 autoindent
  augroup END

  "PHP profile
  augroup php
      au BufRead *.php set tw=106 autoindent
      au BufRead *.php |nmap <Leader>pt :!run-tests %<CR>
      au BufRead *.php |nmap <Leader>pl :!php -l %<CR>
      au BufRead *.php |nmap <Leader>pr :!php %<CR>
  augroup END

  "Mail profile
  augroup mail
      " If you wonder, the big regexes are for matching temp files from cvs
      au BufRead .followup,.article,.letter,/tmp/snd*,/tmp/mutt*,/tmp/moder*,/var/tmp/[a-z][a-z][a-z][a-z][0-9][0-9][0-9]*,/tmp/[0-9][0-9][0-9][0-9][0-9][a-z][a-z][a-z] set formatoptions=tcqro2 comments=n:>,n::,n:»,n:] tw=76 autoindent
  augroup END

  " Markdown document format
  augroup markdown
      au BufRead *.md set syntax=mkd textwidth=80 autoindent
  augroup end

  "C programs
  augroup cprog
      au BufRead *.cpp,*.c,*.h set formatoptions=croq sm sw=4 sts=4 cindent comments=sr:/*,mb:*,el:*/,:// | if file_readable("tags.vim") | so tags.vim | endif
  augroup END

  "Perl profile
  augroup perl
      au BufReadPre *.pl,*.pm set formatoptions=croq sm sw=4 sts=4 cindent cinkeys='0{,0}šOšOšOšOšO,!^F,o,O,e' " tags=./tags,tags,~/devel/tags,~/devel/CVS/bin/contrib/tags
  augroup END

  "Python profile
  augroup python
      au BufReadPre *.py set formatoptions=croq sm sw=4 sts=4 cindent cinkeys='0{,0},!^F,o,O,e' | nmap <C-x> :!python %<CR>
  augroup END

  "Shell profile
  augroup shell
      au BufRead profile,bashrc,.profile,.bashrc,.bash_*,.kshrc,*.sh,*.ksh,*.bash,*.env,.login,.cshrc,*.csh,*.tcsh,.z*,zsh*,zlog* set formatoptions=croq sm sw=4 sts=4 cindent cinkeys='0{,0},!^F,o,O,e'
  augroup END

  " Clojure
  augroup clojure
    au BufRead *.clj map <Leader>w <Esc>:w<CR> | map <Leader>wr :w<CR>:!lein run<CR> | map <Leader>d :new +r!lein\ run<CR> | map <Leader>t :w<CR>:Eval (clojure.test/run-tests)<CR>
  augroup END


  " Also, support editing of gzip-compressed files. 
  " This is also used when loading compressed helpfiles, if you have any.
  augroup gzip
      " Enable editing of gzipped files
      "      read:    set binary mode before reading the file
      "               uncompress text in buffer after reading
      "     write:    compress file after writing
      "    append:    uncompress file, append, compress file
      autocmd BufReadPre,FileReadPre      *.gz set bin
      autocmd BufReadPre,FileReadPre      *.gz let ch_save = &ch|set ch=2
      autocmd BufReadPost,FileReadPost    *.gz '[,']!gunzip
      autocmd BufReadPost,FileReadPost    *.gz set nobin
      autocmd BufReadPost,FileReadPost    *.gz let &ch = ch_save|unlet ch_save
      " Old vims use this
      "autocmd BufReadPost,FileReadPost    *.gz execute ":doautocmd BufReadPost " . %:r
      autocmd BufReadPost,FileReadPost    *.gz execute ":doautocmd BufReadPost " . expand("%:r")

      autocmd BufWritePost,FileWritePost  *.gz !mv <afile> <afile>:r
      autocmd BufWritePost,FileWritePost  *.gz !gzip <afile>:r

      autocmd FileAppendPre               *.gz !gunzip <afile>
      autocmd FileAppendPre               *.gz !mv <afile>:r <afile>
      autocmd FileAppendPost              *.gz !mv <afile> <afile>:r
      autocmd FileAppendPost              *.gz !gzip <afile>:r
  augroup END

  augroup bzip2
      " Enable editing of bzipped files
      "       read: set binary mode before reading the file
      "             uncompress text in buffer after reading
      "      write: compress file after writing
      "     append: uncompress file, append, compress file
      autocmd BufReadPre,FileReadPre        *.bz2 set bin
      autocmd BufReadPre,FileReadPre        *.bz2 let ch_save = &ch|set ch=2
      autocmd BufReadPost,FileReadPost      *.bz2 set cmdheight=2|'[,']!bunzip2
      " Old vims use this
      "autocmd BufReadPost,FileReadPost      *.bz2 set cmdheight=1 nobin|execute ":doautocmd BufReadPost " . %:r
      autocmd BufReadPost,FileReadPost      *.bz2 set cmdheight=1 nobin|execute ":doautocmd BufReadPost " . expand("%:r")
      autocmd BufReadPost,FileReadPost      *.bz2 let &ch = ch_save|unlet ch_save

      autocmd BufWritePost,FileWritePost    *.bz2 !mv <afile> <afile>:r
      autocmd BufWritePost,FileWritePost    *.bz2 !bzip2 <afile>:r

      autocmd FileAppendPre                 *.bz2 !bunzip2 <afile>
      autocmd FileAppendPre                 *.bz2 !mv <afile>:r <afile>
      autocmd FileAppendPost                *.bz2 !mv <afile> <afile>:r
      autocmd FileAppendPost                *.bz2 !bzip2 -9 --repetitive-best <afile>:r
  augroup END
endif
